DROP TABLE IF EXISTS address;
DROP TABLE IF EXISTS address_status;
DROP TABLE IF EXISTS author;
DROP TABLE IF EXISTS book;
DROP TABLE IF EXISTS book_author;
DROP TABLE IF EXISTS book_language;
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS cust_order;
DROP TABLE IF EXISTS customer;
DROP TABLE IF EXISTS customer_address;
DROP TABLE IF EXISTS order_history;
DROP TABLE IF EXISTS order_line;
DROP TABLE IF EXISTS order_status;
DROP TABLE IF EXISTS publisher;
DROP TABLE IF EXISTS shipping_method;

CREATE TABLE address (
  address_id INTEGER PRIMARY KEY,
  street_number varchar(10) NOT NULL,
  street_name varchar(200) NOT NULL,
  city varchar(100) NOT NULL,
  country_id INTEGER NOT NULL,
  FOREIGN KEY (country_id) REFERENCES country (country_id)
);

CREATE TABLE address_status (
  status_id INTEGER NOT NULL,
  address_status varchar(30) NOT NULL,
  PRIMARY KEY (status_id)
);

--
-- Table structure for table author
--

CREATE TABLE author (
  author_id INTEGER NOT NULL,
  author_name varchar(400) NOT NULL,
  PRIMARY KEY (author_id)
);

--
-- Table structure for table book
--

CREATE TABLE book (
  book_id INTEGER NOT NULL,
  title varchar(400) NOT NULL,
  isbn13 varchar(13) NOT NULL,
  language_id INTEGER NOT NULL,
  num_pages INTEGER NOT NULL,
  publication_date date NOT NULL,
  publisher_id INTEGER NOT NULL,
  PRIMARY KEY (book_id),
  FOREIGN KEY (language_id) REFERENCES book_language (language_id),
  FOREIGN KEY (publisher_id) REFERENCES publisher (publisher_id)
);

--
-- Table structure for table book_author
--

CREATE TABLE book_author (
  book_id INTEGER NOT NULL,
  author_id INTEGER NOT NULL,
  PRIMARY KEY (book_id,author_id),
  FOREIGN KEY (author_id) REFERENCES author (author_id),
  FOREIGN KEY (book_id) REFERENCES book (book_id)
);

--
-- Table structure for table book_language
--

CREATE TABLE book_language (
  language_id INTEGER NOT NULL,
  language_code varchar(8) NOT NULL,
  language_name varchar(50) NOT NULL,
  PRIMARY KEY (language_id)
);

--
-- Table structure for table country
--

CREATE TABLE country (
  country_id INTEGER NOT NULL,
  country_name varchar(200) NOT NULL,
  PRIMARY KEY (country_id)
);

--
-- Table structure for table cust_order
--

CREATE TABLE cust_order (
  order_id INTEGER NOT NULL,
  order_date datetime NOT NULL,
  customer_id INTEGER NOT NULL,
  shipping_method_id INTEGER NOT NULL,
  dest_address_id INTEGER NOT NULL,
  PRIMARY KEY (order_id)
);

--
-- Table structure for table customer
--

CREATE TABLE customer (
  customer_id INTEGER NOT NULL,
  first_name varchar(200) NOT NULL,
  last_name varchar(200) NOT NULL,
  email varchar(350) NOT NULL,
  PRIMARY KEY (customer_id)
);

--
-- Table structure for table customer_address
--

CREATE TABLE customer_address (
  customer_id INTEGER NOT NULL,
  address_id INTEGER NOT NULL,
  status_id INTEGER NOT NULL,
  PRIMARY KEY (customer_id,address_id)
);

--
-- Table structure for table order_history
--

CREATE TABLE order_history (
  history_id INTEGER NOT NULL,
  order_id INTEGER NOT NULL,
  status_id INTEGER NOT NULL,
  status_date datetime NOT NULL,
  PRIMARY KEY (history_id),
  FOREIGN KEY (order_id) REFERENCES cust_order (order_id),
  FOREIGN KEY (status_id) REFERENCES order_status (status_id)
);

--
-- Table structure for table order_line
--

CREATE TABLE order_line (
  line_id INTEGER NOT NULL,
  order_id INTEGER NOT NULL,
  book_id INTEGER NOT NULL,
  price numeric(5,2) NOT NULL,
  PRIMARY KEY (line_id),
  FOREIGN KEY (book_id) REFERENCES book (book_id)
);

--
-- Table structure for table order_status
--

CREATE TABLE order_status (
  status_id INTEGER NOT NULL,
  status_value varchar(20) NOT NULL,
  PRIMARY KEY (status_id)
);

--
-- Table structure for table publisher
--

CREATE TABLE publisher (
  publisher_id INTEGER NOT NULL,
  publisher_name varchar(400) NOT NULL,
  publisher_active varchar(1) NOT NULL DEFAULT 'Y',
  PRIMARY KEY (publisher_id)
);

--
-- Table structure for table shipping_method
--

CREATE TABLE shipping_method (
  method_id INTEGER NOT NULL,
  method_name varchar(100) NOT NULL,
  cost decimal(6,2) NOT NULL,
  PRIMARY KEY (method_id)
);